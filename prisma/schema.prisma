// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // url               = env("POSTGRES_PRISMA_URL") // Uses connection pooling
  // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Client {
  id                Int               @id @default(autoincrement())
  clientId          String            @unique
  name              String
  email             String            @unique
  categories        Category[]
  categoryGroups    CategoryGroup[]
  monthlyCategories MonthlyCategory[]
  transactions      Transaction[]
  pockets           Pocket[]
}

model Category {
  id                Int                       @id @default(autoincrement())
  index             Int?
  client            Client                    @relation(fields: [clientId], references: [clientId])
  clientId          String
  name              String
  type              String // "earning" or "spending"
  memberships       CategoryGroupMembership[]
  monthlyCategories MonthlyCategory[]
  transactions      Transaction[]
  parentId          Int? // Kolom untuk menyimpan referensi ke kategori induk
  parent            Category?                 @relation("SubCategories", fields: [parentId], references: [id]) // Relasi ke kategori induk
  children          Category[]                @relation("SubCategories") // Relasi ke kategori anak
}

model CategoryGroup {
  id          Int                       @id @default(autoincrement())
  index       Int?
  client      Client                    @relation(fields: [clientId], references: [clientId])
  clientId    String
  name        String
  memberships CategoryGroupMembership[]
}

model CategoryGroupMembership {
  category   Category      @relation(fields: [categoryId], references: [id])
  categoryId Int
  group      CategoryGroup @relation(fields: [groupId], references: [id])
  groupId    Int

  @@id([categoryId, groupId])
}

model MonthlyCategory {
  id         Int      @id @default(autoincrement())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  client     Client   @relation(fields: [clientId], references: [clientId])
  clientId   String
  year       String
  month      Int
  amount     Float

  @@unique([categoryId, clientId, year, month])
}

model Transaction {
  id         Int      @id @default(autoincrement())
  client     Client   @relation(fields: [clientId], references: [clientId])
  clientId   String
  date       DateTime
  type       String // earning, spending, transfer or initial
  pockets    Pocket?  @relation("Pocket1", fields: [pocket1], references: [id])
  pocket1    Int?
  pockets2   Pocket?  @relation("Pocket2", fields: [pocket2], references: [id])
  pocket2    Int?
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  desc       String
  amount     Float
}

model Pocket {
  id            Int           @id @default(autoincrement())
  index         Int?
  client        Client        @relation(fields: [clientId], references: [clientId])
  clientId      String
  name          String
  actual        Float
  transactions  Transaction[] @relation("Pocket1")
  transactions2 Transaction[] @relation("Pocket2")
}
